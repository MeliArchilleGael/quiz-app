// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @default(cuid())
  email    String @unique
  password String
  name     String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  access   Access[]
  results  Result[]
  answers  Answer[]
  sessions Session[]
}

model Access {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  startDate DateTime @default(now())
  endDate   DateTime @default(now())

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Category {
  id               String @id @default(cuid())
  categoryName     String
  pointPerQuestion Int    @default(1)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  questions Question[]
}

model Question {
  id                String    @id @default(cuid())
  categoryId        String?
  category          Category? @relation(fields: [categoryId], references: [id])
  title             String
  questionType      String    @default("text")
  mediaLink         String?
  mediaType         String?
  durationInSeconds Int?
  multipleChoice    Boolean   @default(false)

  options Option[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  subject   Subject? @relation(fields: [subjectId], references: [id])
  subjectId String?
  answers   Answer[]
}

model Option {
  id String @id @default(cuid())

  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  optionText  String
  isCorrect   Boolean @default(false)
  optionOrder Int?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  optionChoose OptionChoose[]
}

model Subject {
  id                String     @id @default(cuid())
  subjectName       String
  slug              String     @unique @default("")
  description       String
  durationInMinutes Int
  passScore         Int?       @default(0)
  maxScore          Int?       @default(0)
  questions         Question[]
  results           Result[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Answer {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id])

  questionId String?
  question   Question? @relation(fields: [questionId], references: [id])

  resultId String?
  result   Result? @relation(fields: [resultId], references: [id])

  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")
  optionChoose OptionChoose[]
}

model OptionChoose {
  id       String  @id @default(cuid())
  answerId String?
  answer   Answer? @relation(fields: [answerId], references: [id])

  optionId String?
  option   Option? @relation(fields: [optionId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Result {
  id     String  @id @default(cuid())
  userId String?
  user   User?   @relation(fields: [userId], references: [id])

  subjectId String?
  subject   Subject? @relation(fields: [subjectId], references: [id])

  userScore  Int     @default(0)
  lastResult Boolean @default(true)

  answers    Answer[]

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([identifier, token])
  @@map("verification_tokens")
}
